{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "description": "A feature-rich data table component with server-side filtering, sorting, and pagination",
  "dependencies": [
    "@tanstack/react-table",
    "lucide-react",
    "nuqs"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "calendar",
    "command",
    "dropdown-menu",
    "input",
    "popover",
    "select",
    "separator",
    "slider",
    "table"
  ],
  "files": [
    {
      "path": "src/components/data-table/data-table.tsx",
      "content": "import { flexRender, type Table as TanstackTable } from \"@tanstack/react-table\";\nimport type * as React from \"react\";\n\nimport { DataTablePagination } from \"@/components/data-table/data-table-pagination\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { getCommonPinningStyles } from \"@/lib/data-table\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DataTableProps<TData> extends React.ComponentProps<\"div\"> {\n  table: TanstackTable<TData>;\n  actionBar?: React.ReactNode;\n}\n\nexport function DataTable<TData>({\n  table,\n  actionBar,\n  children,\n  className,\n  ...props\n}: DataTableProps<TData>) {\n  return (\n    <div\n      className={cn(\"flex w-full flex-col gap-2.5 overflow-auto\", className)}\n      {...props}\n    >\n      {children}\n      <div className=\"overflow-hidden rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead\n                    key={header.id}\n                    colSpan={header.colSpan}\n                    style={{\n                      ...getCommonPinningStyles({ column: header.column }),\n                    }}\n                  >\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext(),\n                        )}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell\n                      key={cell.id}\n                      style={{\n                        ...getCommonPinningStyles({ column: cell.column }),\n                      }}\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext(),\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={table.getAllColumns().length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex flex-col gap-2.5\">\n        <DataTablePagination table={table} />\n        {actionBar &&\n          table.getFilteredSelectedRowModel().rows.length > 0 &&\n          actionBar}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table.tsx"
    },
    {
      "path": "src/components/data-table/data-table-column-header.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Column } from \"@tanstack/react-table\";\r\nimport {\r\n  ChevronDown,\r\n  ChevronsUpDown,\r\n  ChevronUp,\r\n  EyeOff,\r\n  X,\r\n} from \"lucide-react\";\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface DataTableColumnHeaderProps<TData, TValue>\r\n  extends React.ComponentProps<typeof DropdownMenuTrigger> {\r\n  column: Column<TData, TValue>;\r\n  label: string;\r\n}\r\n\r\nexport function DataTableColumnHeader<TData, TValue>({\r\n  column,\r\n  label,\r\n  className,\r\n  ...props\r\n}: DataTableColumnHeaderProps<TData, TValue>) {\r\n  if (!column.getCanSort() && !column.getCanHide()) {\r\n    return <div className={cn(className)}>{label}</div>;\r\n  }\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger\r\n        className={cn(\r\n          \"-ml-1.5 flex h-8 items-center gap-1.5 rounded-md px-2 py-1.5 hover:bg-accent focus:outline-none focus:ring-1 focus:ring-ring data-[state=open]:bg-accent [&_svg]:size-4 [&_svg]:shrink-0 [&_svg]:text-muted-foreground\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        {label}\r\n        {column.getCanSort() &&\r\n          (column.getIsSorted() === \"desc\" ? (\r\n            <ChevronDown />\r\n          ) : column.getIsSorted() === \"asc\" ? (\r\n            <ChevronUp />\r\n          ) : (\r\n            <ChevronsUpDown />\r\n          ))}\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"start\" className=\"w-28\">\r\n        {column.getCanSort() && (\r\n          <>\r\n            <DropdownMenuCheckboxItem\r\n              className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\r\n              checked={column.getIsSorted() === \"asc\"}\r\n              onClick={() => column.toggleSorting(false)}\r\n            >\r\n              <ChevronUp />\r\n              Asc\r\n            </DropdownMenuCheckboxItem>\r\n            <DropdownMenuCheckboxItem\r\n              className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\r\n              checked={column.getIsSorted() === \"desc\"}\r\n              onClick={() => column.toggleSorting(true)}\r\n            >\r\n              <ChevronDown />\r\n              Desc\r\n            </DropdownMenuCheckboxItem>\r\n            {column.getIsSorted() && (\r\n              <DropdownMenuItem\r\n                className=\"pl-2 [&_svg]:text-muted-foreground\"\r\n                onClick={() => column.clearSorting()}\r\n              >\r\n                <X />\r\n                Reset\r\n              </DropdownMenuItem>\r\n            )}\r\n          </>\r\n        )}\r\n        {column.getCanHide() && (\r\n          <DropdownMenuCheckboxItem\r\n            className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\r\n            checked={!column.getIsVisible()}\r\n            onClick={() => column.toggleVisibility(false)}\r\n          >\r\n            <EyeOff />\r\n            Hide\r\n          </DropdownMenuCheckboxItem>\r\n        )}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-column-header.tsx"
    },
    {
      "path": "src/components/data-table/data-table-pagination.tsx",
      "content": "import type { Table } from \"@tanstack/react-table\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DataTablePaginationProps<TData> extends React.ComponentProps<\"div\"> {\n  table: Table<TData>;\n  pageSizeOptions?: number[];\n}\n\nexport function DataTablePagination<TData>({\n  table,\n  pageSizeOptions = [10, 20, 30, 40, 50],\n  className,\n  ...props\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div\n      className={cn(\n        \"flex w-full flex-col-reverse items-center justify-between gap-4 overflow-auto p-1 sm:flex-row sm:gap-8\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"flex-1 whitespace-nowrap text-muted-foreground text-sm\">\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex flex-col-reverse items-center gap-4 sm:flex-row sm:gap-6 lg:gap-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"whitespace-nowrap font-medium text-sm\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[4.5rem] [&[data-size]]:h-8\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {pageSizeOptions.map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex items-center justify-center font-medium text-sm\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            aria-label=\"Go to first page\"\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <ChevronsLeft />\n          </Button>\n          <Button\n            aria-label=\"Go to previous page\"\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <ChevronLeft />\n          </Button>\n          <Button\n            aria-label=\"Go to next page\"\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <ChevronRight />\n          </Button>\n          <Button\n            aria-label=\"Go to last page\"\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <ChevronsRight />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-pagination.tsx"
    },
    {
      "path": "src/components/data-table/data-table-view-options.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Table } from \"@tanstack/react-table\";\r\nimport { Check, Settings2 } from \"lucide-react\";\r\nimport * as React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface DataTableViewOptionsProps<TData>\r\n  extends React.ComponentProps<typeof PopoverContent> {\r\n  table: Table<TData>;\r\n}\r\n\r\nexport function DataTableViewOptions<TData>({\r\n  table,\r\n  ...props\r\n}: DataTableViewOptionsProps<TData>) {\r\n  const columns = React.useMemo(\r\n    () =>\r\n      table\r\n        .getAllColumns()\r\n        .filter(\r\n          (column) =>\r\n            typeof column.accessorFn !== \"undefined\" && column.getCanHide(),\r\n        ),\r\n    [table],\r\n  );\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          aria-label=\"Toggle columns\"\r\n          role=\"combobox\"\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"ml-auto hidden h-8 font-normal lg:flex\"\r\n        >\r\n          <Settings2 className=\"text-muted-foreground\" />\r\n          View\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-44 p-0\" {...props}>\r\n        <Command>\r\n          <CommandInput placeholder=\"Search columns...\" />\r\n          <CommandList>\r\n            <CommandEmpty>No columns found.</CommandEmpty>\r\n            <CommandGroup>\r\n              {columns.map((column) => (\r\n                <CommandItem\r\n                  key={column.id}\r\n                  onSelect={() =>\r\n                    column.toggleVisibility(!column.getIsVisible())\r\n                  }\r\n                >\r\n                  <span className=\"truncate\">\r\n                    {column.columnDef.meta?.label ?? column.id}\r\n                  </span>\r\n                  <Check\r\n                    className={cn(\r\n                      \"ml-auto size-4 shrink-0\",\r\n                      column.getIsVisible() ? \"opacity-100\" : \"opacity-0\",\r\n                    )}\r\n                  />\r\n                </CommandItem>\r\n              ))}\r\n            </CommandGroup>\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-view-options.tsx"
    },
    {
      "path": "src/components/data-table/data-table-faceted-filter.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Column } from \"@tanstack/react-table\";\r\nimport { Check, PlusCircle, XCircle } from \"lucide-react\";\r\nimport * as React from \"react\";\r\n\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandSeparator,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { Option } from \"@/types/data-table\";\r\n\r\ninterface DataTableFacetedFilterProps<TData, TValue> {\r\n  column?: Column<TData, TValue>;\r\n  title?: string;\r\n  options: Option[];\r\n  multiple?: boolean;\r\n}\r\n\r\nexport function DataTableFacetedFilter<TData, TValue>({\r\n  column,\r\n  title,\r\n  options,\r\n  multiple,\r\n}: DataTableFacetedFilterProps<TData, TValue>) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const columnFilterValue = column?.getFilterValue();\r\n  const selectedValues = new Set(\r\n    Array.isArray(columnFilterValue) ? columnFilterValue : [],\r\n  );\r\n\r\n  const onItemSelect = React.useCallback(\r\n    (option: Option, isSelected: boolean) => {\r\n      if (!column) return;\r\n\r\n      if (multiple) {\r\n        const newSelectedValues = new Set(selectedValues);\r\n        if (isSelected) {\r\n          newSelectedValues.delete(option.value);\r\n        } else {\r\n          newSelectedValues.add(option.value);\r\n        }\r\n        const filterValues = Array.from(newSelectedValues);\r\n        column.setFilterValue(filterValues.length ? filterValues : undefined);\r\n      } else {\r\n        column.setFilterValue(isSelected ? undefined : [option.value]);\r\n        setOpen(false);\r\n      }\r\n    },\r\n    [column, multiple, selectedValues],\r\n  );\r\n\r\n  const onReset = React.useCallback(\r\n    (event?: React.MouseEvent) => {\r\n      event?.stopPropagation();\r\n      column?.setFilterValue(undefined);\r\n    },\r\n    [column],\r\n  );\r\n\r\n  return (\r\n    <Popover open={open} onOpenChange={setOpen}>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"border-dashed font-normal\"\r\n        >\r\n          {selectedValues?.size > 0 ? (\r\n            <div\r\n              role=\"button\"\r\n              aria-label={`Clear ${title} filter`}\r\n              tabIndex={0}\r\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\r\n              onClick={onReset}\r\n            >\r\n              <XCircle />\r\n            </div>\r\n          ) : (\r\n            <PlusCircle />\r\n          )}\r\n          {title}\r\n          {selectedValues?.size > 0 && (\r\n            <>\r\n              <Separator\r\n                orientation=\"vertical\"\r\n                className=\"mx-0.5 data-[orientation=vertical]:h-4\"\r\n              />\r\n              <Badge\r\n                variant=\"secondary\"\r\n                className=\"rounded-sm px-1 font-normal lg:hidden\"\r\n              >\r\n                {selectedValues.size}\r\n              </Badge>\r\n              <div className=\"hidden items-center gap-1 lg:flex\">\r\n                {selectedValues.size > 2 ? (\r\n                  <Badge\r\n                    variant=\"secondary\"\r\n                    className=\"rounded-sm px-1 font-normal\"\r\n                  >\r\n                    {selectedValues.size} selected\r\n                  </Badge>\r\n                ) : (\r\n                  options\r\n                    .filter((option) => selectedValues.has(option.value))\r\n                    .map((option) => (\r\n                      <Badge\r\n                        variant=\"secondary\"\r\n                        key={option.value}\r\n                        className=\"rounded-sm px-1 font-normal\"\r\n                      >\r\n                        {option.label}\r\n                      </Badge>\r\n                    ))\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-[12.5rem] p-0\" align=\"start\">\r\n        <Command>\r\n          <CommandInput placeholder={title} />\r\n          <CommandList className=\"max-h-full\">\r\n            <CommandEmpty>No results found.</CommandEmpty>\r\n            <CommandGroup className=\"max-h-[300px] scroll-py-1 overflow-y-auto overflow-x-hidden\">\r\n              {options.map((option) => {\r\n                const isSelected = selectedValues.has(option.value);\r\n\r\n                return (\r\n                  <CommandItem\r\n                    key={option.value}\r\n                    onSelect={() => onItemSelect(option, isSelected)}\r\n                  >\r\n                    <div\r\n                      className={cn(\r\n                        \"flex size-4 items-center justify-center rounded-sm border border-primary\",\r\n                        isSelected\r\n                          ? \"bg-primary\"\r\n                          : \"opacity-50 [&_svg]:invisible\",\r\n                      )}\r\n                    >\r\n                      <Check />\r\n                    </div>\r\n                    {option.icon && <option.icon />}\r\n                    <span className=\"truncate\">{option.label}</span>\r\n                    {option.count && (\r\n                      <span className=\"ml-auto font-mono text-xs\">\r\n                        {option.count}\r\n                      </span>\r\n                    )}\r\n                  </CommandItem>\r\n                );\r\n              })}\r\n            </CommandGroup>\r\n            {selectedValues.size > 0 && (\r\n              <>\r\n                <CommandSeparator />\r\n                <CommandGroup>\r\n                  <CommandItem\r\n                    onSelect={() => onReset()}\r\n                    className=\"justify-center text-center\"\r\n                  >\r\n                    Clear filters\r\n                  </CommandItem>\r\n                </CommandGroup>\r\n              </>\r\n            )}\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-faceted-filter.tsx"
    },
    {
      "path": "src/components/data-table/data-table-toolbar.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Column, Table } from \"@tanstack/react-table\";\r\nimport { X } from \"lucide-react\";\r\nimport * as React from \"react\";\r\n\r\nimport { DataTableDateFilter } from \"@/components/data-table/data-table-date-filter\";\r\nimport { DataTableFacetedFilter } from \"@/components/data-table/data-table-faceted-filter\";\r\nimport { DataTableSliderFilter } from \"@/components/data-table/data-table-slider-filter\";\r\nimport { DataTableViewOptions } from \"@/components/data-table/data-table-view-options\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface DataTableToolbarProps<TData> extends React.ComponentProps<\"div\"> {\r\n  table: Table<TData>;\r\n}\r\n\r\nexport function DataTableToolbar<TData>({\r\n  table,\r\n  children,\r\n  className,\r\n  ...props\r\n}: DataTableToolbarProps<TData>) {\r\n  const isFiltered = table.getState().columnFilters.length > 0;\r\n\r\n  const columns = React.useMemo(\r\n    () => table.getAllColumns().filter((column) => column.getCanFilter()),\r\n    [table],\r\n  );\r\n\r\n  const onReset = React.useCallback(() => {\r\n    table.resetColumnFilters();\r\n  }, [table]);\r\n\r\n  return (\r\n    <div\r\n      role=\"toolbar\"\r\n      aria-orientation=\"horizontal\"\r\n      className={cn(\r\n        \"flex w-full items-start justify-between gap-2 p-1\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      <div className=\"flex flex-1 flex-wrap items-center gap-2\">\r\n        {columns.map((column) => (\r\n          <DataTableToolbarFilter key={column.id} column={column} />\r\n        ))}\r\n        {isFiltered && (\r\n          <Button\r\n            aria-label=\"Reset filters\"\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            className=\"border-dashed\"\r\n            onClick={onReset}\r\n          >\r\n            <X />\r\n            Reset\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <div className=\"flex items-center gap-2\">\r\n        {children}\r\n        <DataTableViewOptions table={table} align=\"end\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\ninterface DataTableToolbarFilterProps<TData> {\r\n  column: Column<TData>;\r\n}\r\n\r\nfunction DataTableToolbarFilter<TData>({\r\n  column,\r\n}: DataTableToolbarFilterProps<TData>) {\r\n  {\r\n    const columnMeta = column.columnDef.meta;\r\n\r\n    const onFilterRender = React.useCallback(() => {\r\n      if (!columnMeta?.variant) return null;\r\n\r\n      switch (columnMeta.variant) {\r\n        case \"text\":\r\n          return (\r\n            <Input\r\n              placeholder={columnMeta.placeholder ?? columnMeta.label}\r\n              value={(column.getFilterValue() as string) ?? \"\"}\r\n              onChange={(event) => column.setFilterValue(event.target.value)}\r\n              className=\"h-8 w-40 lg:w-56\"\r\n            />\r\n          );\r\n\r\n        case \"number\":\r\n          return (\r\n            <div className=\"relative\">\r\n              <Input\r\n                type=\"number\"\r\n                inputMode=\"numeric\"\r\n                placeholder={columnMeta.placeholder ?? columnMeta.label}\r\n                value={(column.getFilterValue() as string) ?? \"\"}\r\n                onChange={(event) => column.setFilterValue(event.target.value)}\r\n                className={cn(\"h-8 w-[120px]\", columnMeta.unit && \"pr-8\")}\r\n              />\r\n              {columnMeta.unit && (\r\n                <span className=\"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\r\n                  {columnMeta.unit}\r\n                </span>\r\n              )}\r\n            </div>\r\n          );\r\n\r\n        case \"range\":\r\n          return (\r\n            <DataTableSliderFilter\r\n              column={column}\r\n              title={columnMeta.label ?? column.id}\r\n            />\r\n          );\r\n\r\n        case \"date\":\r\n        case \"dateRange\":\r\n          return (\r\n            <DataTableDateFilter\r\n              column={column}\r\n              title={columnMeta.label ?? column.id}\r\n              multiple={columnMeta.variant === \"dateRange\"}\r\n            />\r\n          );\r\n\r\n        case \"select\":\r\n        case \"multiSelect\":\r\n          return (\r\n            <DataTableFacetedFilter\r\n              column={column}\r\n              title={columnMeta.label ?? column.id}\r\n              options={columnMeta.options ?? []}\r\n              multiple={columnMeta.variant === \"multiSelect\"}\r\n            />\r\n          );\r\n\r\n        default:\r\n          return null;\r\n      }\r\n    }, [column, columnMeta]);\r\n\r\n    return onFilterRender();\r\n  }\r\n}\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-toolbar.tsx"
    },
    {
      "path": "src/components/data-table/data-table-slider-filter.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Column } from \"@tanstack/react-table\";\r\nimport { PlusCircle, XCircle } from \"lucide-react\";\r\nimport * as React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { Slider } from \"@/components/ui/slider\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface Range {\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\ntype RangeValue = [number, number];\r\n\r\nfunction getIsValidRange(value: unknown): value is RangeValue {\r\n  return (\r\n    Array.isArray(value) &&\r\n    value.length === 2 &&\r\n    typeof value[0] === \"number\" &&\r\n    typeof value[1] === \"number\"\r\n  );\r\n}\r\n\r\nfunction parseValuesAsNumbers(value: unknown): RangeValue | undefined {\r\n  if (\r\n    Array.isArray(value) &&\r\n    value.length === 2 &&\r\n    value.every(\r\n      (v) =>\r\n        (typeof v === \"string\" || typeof v === \"number\") && !Number.isNaN(v),\r\n    )\r\n  ) {\r\n    return [Number(value[0]), Number(value[1])];\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\ninterface DataTableSliderFilterProps<TData> {\r\n  column: Column<TData, unknown>;\r\n  title?: string;\r\n}\r\n\r\nexport function DataTableSliderFilter<TData>({\r\n  column,\r\n  title,\r\n}: DataTableSliderFilterProps<TData>) {\r\n  const id = React.useId();\r\n\r\n  const columnFilterValue = parseValuesAsNumbers(column.getFilterValue());\r\n\r\n  const defaultRange = column.columnDef.meta?.range;\r\n  const unit = column.columnDef.meta?.unit;\r\n\r\n  const { min, max, step } = React.useMemo<Range & { step: number }>(() => {\r\n    let minValue = 0;\r\n    let maxValue = 100;\r\n\r\n    if (defaultRange && getIsValidRange(defaultRange)) {\r\n      [minValue, maxValue] = defaultRange;\r\n    } else {\r\n      const values = column.getFacetedMinMaxValues();\r\n      if (values && Array.isArray(values) && values.length === 2) {\r\n        const [facetMinValue, facetMaxValue] = values;\r\n        if (\r\n          typeof facetMinValue === \"number\" &&\r\n          typeof facetMaxValue === \"number\"\r\n        ) {\r\n          minValue = facetMinValue;\r\n          maxValue = facetMaxValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    const rangeSize = maxValue - minValue;\r\n    const step =\r\n      rangeSize <= 20\r\n        ? 1\r\n        : rangeSize <= 100\r\n          ? Math.ceil(rangeSize / 20)\r\n          : Math.ceil(rangeSize / 50);\r\n\r\n    return { min: minValue, max: maxValue, step };\r\n  }, [column, defaultRange]);\r\n\r\n  const range = React.useMemo((): RangeValue => {\r\n    return columnFilterValue ?? [min, max];\r\n  }, [columnFilterValue, min, max]);\r\n\r\n  const formatValue = React.useCallback((value: number) => {\r\n    return value.toLocaleString(undefined, { maximumFractionDigits: 0 });\r\n  }, []);\r\n\r\n  const onFromInputChange = React.useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const numValue = Number(event.target.value);\r\n      if (!Number.isNaN(numValue) && numValue >= min && numValue <= range[1]) {\r\n        column.setFilterValue([numValue, range[1]]);\r\n      }\r\n    },\r\n    [column, min, range],\r\n  );\r\n\r\n  const onToInputChange = React.useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const numValue = Number(event.target.value);\r\n      if (!Number.isNaN(numValue) && numValue <= max && numValue >= range[0]) {\r\n        column.setFilterValue([range[0], numValue]);\r\n      }\r\n    },\r\n    [column, max, range],\r\n  );\r\n\r\n  const onSliderValueChange = React.useCallback(\r\n    (value: RangeValue) => {\r\n      if (Array.isArray(value) && value.length === 2) {\r\n        column.setFilterValue(value);\r\n      }\r\n    },\r\n    [column],\r\n  );\r\n\r\n  const onReset = React.useCallback(\r\n    (event: React.MouseEvent) => {\r\n      if (event.target instanceof HTMLDivElement) {\r\n        event.stopPropagation();\r\n      }\r\n      column.setFilterValue(undefined);\r\n    },\r\n    [column],\r\n  );\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"border-dashed font-normal\"\r\n        >\r\n          {columnFilterValue ? (\r\n            <div\r\n              role=\"button\"\r\n              aria-label={`Clear ${title} filter`}\r\n              tabIndex={0}\r\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\r\n              onClick={onReset}\r\n            >\r\n              <XCircle />\r\n            </div>\r\n          ) : (\r\n            <PlusCircle />\r\n          )}\r\n          <span>{title}</span>\r\n          {columnFilterValue ? (\r\n            <>\r\n              <Separator\r\n                orientation=\"vertical\"\r\n                className=\"mx-0.5 data-[orientation=vertical]:h-4\"\r\n              />\r\n              {formatValue(columnFilterValue[0])} -{\" \"}\r\n              {formatValue(columnFilterValue[1])}\r\n              {unit ? ` ${unit}` : \"\"}\r\n            </>\r\n          ) : null}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent align=\"start\" className=\"flex w-auto flex-col gap-4\">\r\n        <div className=\"flex flex-col gap-3\">\r\n          <p className=\"font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\r\n            {title}\r\n          </p>\r\n          <div className=\"flex items-center gap-4\">\r\n            <Label htmlFor={`${id}-from`} className=\"sr-only\">\r\n              From\r\n            </Label>\r\n            <div className=\"relative\">\r\n              <Input\r\n                id={`${id}-from`}\r\n                type=\"number\"\r\n                aria-valuemin={min}\r\n                aria-valuemax={max}\r\n                inputMode=\"numeric\"\r\n                pattern=\"[0-9]*\"\r\n                placeholder={min.toString()}\r\n                min={min}\r\n                max={max}\r\n                value={range[0]?.toString()}\r\n                onChange={onFromInputChange}\r\n                className={cn(\"h-8 w-24\", unit && \"pr-8\")}\r\n              />\r\n              {unit && (\r\n                <span className=\"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\r\n                  {unit}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <Label htmlFor={`${id}-to`} className=\"sr-only\">\r\n              to\r\n            </Label>\r\n            <div className=\"relative\">\r\n              <Input\r\n                id={`${id}-to`}\r\n                type=\"number\"\r\n                aria-valuemin={min}\r\n                aria-valuemax={max}\r\n                inputMode=\"numeric\"\r\n                pattern=\"[0-9]*\"\r\n                placeholder={max.toString()}\r\n                min={min}\r\n                max={max}\r\n                value={range[1]?.toString()}\r\n                onChange={onToInputChange}\r\n                className={cn(\"h-8 w-24\", unit && \"pr-8\")}\r\n              />\r\n              {unit && (\r\n                <span className=\"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\r\n                  {unit}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <Label htmlFor={`${id}-slider`} className=\"sr-only\">\r\n            {title} slider\r\n          </Label>\r\n          <Slider\r\n            id={`${id}-slider`}\r\n            min={min}\r\n            max={max}\r\n            step={step}\r\n            value={range}\r\n            onValueChange={onSliderValueChange}\r\n          />\r\n        </div>\r\n        <Button\r\n          aria-label={`Clear ${title} filter`}\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={onReset}\r\n        >\r\n          Clear\r\n        </Button>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-slider-filter.tsx"
    },
    {
      "path": "src/components/data-table/data-table-date-filter.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Column } from \"@tanstack/react-table\";\r\nimport { CalendarIcon, XCircle } from \"lucide-react\";\r\nimport * as React from \"react\";\r\nimport type { DateRange } from \"react-day-picker\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { formatDate } from \"@/lib/format\";\r\n\r\ntype DateSelection = Date[] | DateRange;\r\n\r\nfunction getIsDateRange(value: DateSelection): value is DateRange {\r\n  return value && typeof value === \"object\" && !Array.isArray(value);\r\n}\r\n\r\nfunction parseAsDate(timestamp: number | string | undefined): Date | undefined {\r\n  if (!timestamp) return undefined;\r\n  const numericTimestamp =\r\n    typeof timestamp === \"string\" ? Number(timestamp) : timestamp;\r\n  const date = new Date(numericTimestamp);\r\n  return !Number.isNaN(date.getTime()) ? date : undefined;\r\n}\r\n\r\nfunction parseColumnFilterValue(value: unknown) {\r\n  if (value === null || value === undefined) {\r\n    return [];\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.map((item) => {\r\n      if (typeof item === \"number\" || typeof item === \"string\") {\r\n        return item;\r\n      }\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  if (typeof value === \"string\" || typeof value === \"number\") {\r\n    return [value];\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\ninterface DataTableDateFilterProps<TData> {\r\n  column: Column<TData, unknown>;\r\n  title?: string;\r\n  multiple?: boolean;\r\n}\r\n\r\nexport function DataTableDateFilter<TData>({\r\n  column,\r\n  title,\r\n  multiple,\r\n}: DataTableDateFilterProps<TData>) {\r\n  const columnFilterValue = column.getFilterValue();\r\n\r\n  const selectedDates = React.useMemo<DateSelection>(() => {\r\n    if (!columnFilterValue) {\r\n      return multiple ? { from: undefined, to: undefined } : [];\r\n    }\r\n\r\n    if (multiple) {\r\n      const timestamps = parseColumnFilterValue(columnFilterValue);\r\n      return {\r\n        from: parseAsDate(timestamps[0]),\r\n        to: parseAsDate(timestamps[1]),\r\n      };\r\n    }\r\n\r\n    const timestamps = parseColumnFilterValue(columnFilterValue);\r\n    const date = parseAsDate(timestamps[0]);\r\n    return date ? [date] : [];\r\n  }, [columnFilterValue, multiple]);\r\n\r\n  const onSelect = React.useCallback(\r\n    (date: Date | DateRange | undefined) => {\r\n      if (!date) {\r\n        column.setFilterValue(undefined);\r\n        return;\r\n      }\r\n\r\n      if (multiple && !(\"getTime\" in date)) {\r\n        const from = date.from?.getTime();\r\n        const to = date.to?.getTime();\r\n        column.setFilterValue(from || to ? [from, to] : undefined);\r\n      } else if (!multiple && \"getTime\" in date) {\r\n        column.setFilterValue(date.getTime());\r\n      }\r\n    },\r\n    [column, multiple],\r\n  );\r\n\r\n  const onReset = React.useCallback(\r\n    (event: React.MouseEvent) => {\r\n      event.stopPropagation();\r\n      column.setFilterValue(undefined);\r\n    },\r\n    [column],\r\n  );\r\n\r\n  const hasValue = React.useMemo(() => {\r\n    if (multiple) {\r\n      if (!getIsDateRange(selectedDates)) return false;\r\n      return selectedDates.from || selectedDates.to;\r\n    }\r\n    if (!Array.isArray(selectedDates)) return false;\r\n    return selectedDates.length > 0;\r\n  }, [multiple, selectedDates]);\r\n\r\n  const formatDateRange = React.useCallback((range: DateRange) => {\r\n    if (!range.from && !range.to) return \"\";\r\n    if (range.from && range.to) {\r\n      return `${formatDate(range.from)} - ${formatDate(range.to)}`;\r\n    }\r\n    return formatDate(range.from ?? range.to);\r\n  }, []);\r\n\r\n  const label = React.useMemo(() => {\r\n    if (multiple) {\r\n      if (!getIsDateRange(selectedDates)) return null;\r\n\r\n      const hasSelectedDates = selectedDates.from || selectedDates.to;\r\n      const dateText = hasSelectedDates\r\n        ? formatDateRange(selectedDates)\r\n        : \"Select date range\";\r\n\r\n      return (\r\n        <span className=\"flex items-center gap-2\">\r\n          <span>{title}</span>\r\n          {hasSelectedDates && (\r\n            <>\r\n              <Separator\r\n                orientation=\"vertical\"\r\n                className=\"mx-0.5 data-[orientation=vertical]:h-4\"\r\n              />\r\n              <span>{dateText}</span>\r\n            </>\r\n          )}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    if (getIsDateRange(selectedDates)) return null;\r\n\r\n    const hasSelectedDate = selectedDates.length > 0;\r\n    const dateText = hasSelectedDate\r\n      ? formatDate(selectedDates[0])\r\n      : \"Select date\";\r\n\r\n    return (\r\n      <span className=\"flex items-center gap-2\">\r\n        <span>{title}</span>\r\n        {hasSelectedDate && (\r\n          <>\r\n            <Separator\r\n              orientation=\"vertical\"\r\n              className=\"mx-0.5 data-[orientation=vertical]:h-4\"\r\n            />\r\n            <span>{dateText}</span>\r\n          </>\r\n        )}\r\n      </span>\r\n    );\r\n  }, [selectedDates, multiple, formatDateRange, title]);\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"border-dashed font-normal\"\r\n        >\r\n          {hasValue ? (\r\n            <div\r\n              role=\"button\"\r\n              aria-label={`Clear ${title} filter`}\r\n              tabIndex={0}\r\n              onClick={onReset}\r\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\r\n            >\r\n              <XCircle />\r\n            </div>\r\n          ) : (\r\n            <CalendarIcon />\r\n          )}\r\n          {label}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n        {multiple ? (\r\n          <Calendar\r\n            autoFocus\r\n            captionLayout=\"dropdown\"\r\n            mode=\"range\"\r\n            selected={\r\n              getIsDateRange(selectedDates)\r\n                ? selectedDates\r\n                : { from: undefined, to: undefined }\r\n            }\r\n            onSelect={onSelect}\r\n          />\r\n        ) : (\r\n          <Calendar\r\n            captionLayout=\"dropdown\"\r\n            mode=\"single\"\r\n            selected={\r\n              !getIsDateRange(selectedDates) ? selectedDates[0] : undefined\r\n            }\r\n            onSelect={onSelect}\r\n          />\r\n        )}\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-date-filter.tsx"
    },
    {
      "path": "src/components/data-table/data-table-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DataTableSkeletonProps extends React.ComponentProps<\"div\"> {\n  columnCount: number;\n  rowCount?: number;\n  filterCount?: number;\n  cellWidths?: string[];\n  withViewOptions?: boolean;\n  withPagination?: boolean;\n  shrinkZero?: boolean;\n}\n\nexport function DataTableSkeleton({\n  columnCount,\n  rowCount = 10,\n  filterCount = 0,\n  cellWidths = [\"auto\"],\n  withViewOptions = true,\n  withPagination = true,\n  shrinkZero = false,\n  className,\n  ...props\n}: DataTableSkeletonProps) {\n  const cozyCellWidths = Array.from(\n    { length: columnCount },\n    (_, index) => cellWidths[index % cellWidths.length] ?? \"auto\",\n  );\n\n  return (\n    <div\n      className={cn(\"flex w-full flex-col gap-2.5 overflow-auto\", className)}\n      {...props}\n    >\n      <div className=\"flex w-full items-center justify-between gap-2 overflow-auto p-1\">\n        <div className=\"flex flex-1 items-center gap-2\">\n          {filterCount > 0\n            ? Array.from({ length: filterCount }).map((_, i) => (\n                <Skeleton key={i} className=\"h-7 w-[4.5rem] border-dashed\" />\n              ))\n            : null}\n        </div>\n        {withViewOptions ? (\n          <Skeleton className=\"ml-auto hidden h-7 w-[4.5rem] lg:flex\" />\n        ) : null}\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {Array.from({ length: 1 }).map((_, i) => (\n              <TableRow key={i} className=\"hover:bg-transparent\">\n                {Array.from({ length: columnCount }).map((_, j) => (\n                  <TableHead\n                    key={j}\n                    style={{\n                      width: cozyCellWidths[j],\n                      minWidth: shrinkZero ? cozyCellWidths[j] : \"auto\",\n                    }}\n                  >\n                    <Skeleton className=\"h-6 w-full\" />\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {Array.from({ length: rowCount }).map((_, i) => (\n              <TableRow key={i} className=\"hover:bg-transparent\">\n                {Array.from({ length: columnCount }).map((_, j) => (\n                  <TableCell\n                    key={j}\n                    style={{\n                      width: cozyCellWidths[j],\n                      minWidth: shrinkZero ? cozyCellWidths[j] : \"auto\",\n                    }}\n                  >\n                    <Skeleton className=\"h-6 w-full\" />\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n      {withPagination ? (\n        <div className=\"flex w-full items-center justify-between gap-4 overflow-auto p-1 sm:gap-8\">\n          <Skeleton className=\"h-7 w-40 shrink-0\" />\n          <div className=\"flex items-center gap-4 sm:gap-6 lg:gap-8\">\n            <div className=\"flex items-center gap-2\">\n              <Skeleton className=\"h-7 w-24\" />\n              <Skeleton className=\"h-7 w-[4.5rem]\" />\n            </div>\n            <div className=\"flex items-center justify-center font-medium text-sm\">\n              <Skeleton className=\"h-7 w-20\" />\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Skeleton className=\"hidden size-7 lg:block\" />\n              <Skeleton className=\"size-7\" />\n              <Skeleton className=\"size-7\" />\n              <Skeleton className=\"hidden size-7 lg:block\" />\n            </div>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-skeleton.tsx"
    },
    {
      "path": "src/hooks/use-callback-ref.ts",
      "content": "import * as React from \"react\";\n\n/**\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/use-callback-ref/src/useCallbackRef.tsx\n */\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: never[]) => unknown>(\n  callback: T | undefined,\n): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(\n    () => ((...args) => callbackRef.current?.(...args)) as T,\n    [],\n  );\n}\n\nexport { useCallbackRef };\n",
      "type": "registry:hook"
    },
    {
      "path": "src/hooks/use-data-table.ts",
      "content": "\"use client\";\r\n\r\nimport {\r\n  type ColumnFiltersState,\r\n  getCoreRowModel,\r\n  getFacetedMinMaxValues,\r\n  getFacetedRowModel,\r\n  getFacetedUniqueValues,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  type PaginationState,\r\n  type RowSelectionState,\r\n  type SortingState,\r\n  type TableOptions,\r\n  type TableState,\r\n  type Updater,\r\n  useReactTable,\r\n  type VisibilityState,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  parseAsArrayOf,\r\n  parseAsInteger,\r\n  parseAsString,\r\n  type SingleParser,\r\n  type UseQueryStateOptions,\r\n  useQueryState,\r\n  useQueryStates,\r\n} from \"nuqs\";\r\nimport * as React from \"react\";\r\n\r\nimport { useDebouncedCallback } from \"@/hooks/use-debounced-callback\";\r\nimport { getSortingStateParser } from \"@/lib/parsers\";\r\nimport type { ExtendedColumnSort, QueryKeys } from \"@/types/data-table\";\r\n\r\nconst PAGE_KEY = \"page\";\r\nconst PER_PAGE_KEY = \"perPage\";\r\nconst SORT_KEY = \"sort\";\r\nconst FILTERS_KEY = \"filters\";\r\nconst JOIN_OPERATOR_KEY = \"joinOperator\";\r\nconst ARRAY_SEPARATOR = \",\";\r\nconst DEBOUNCE_MS = 300;\r\nconst THROTTLE_MS = 50;\r\n\r\ninterface UseDataTableProps<TData>\r\n  extends Omit<\r\n      TableOptions<TData>,\r\n      | \"state\"\r\n      | \"pageCount\"\r\n      | \"getCoreRowModel\"\r\n      | \"manualFiltering\"\r\n      | \"manualPagination\"\r\n      | \"manualSorting\"\r\n    >,\r\n    Required<Pick<TableOptions<TData>, \"pageCount\">> {\r\n  initialState?: Omit<Partial<TableState>, \"sorting\"> & {\r\n    sorting?: ExtendedColumnSort<TData>[];\r\n  };\r\n  queryKeys?: Partial<QueryKeys>;\r\n  history?: \"push\" | \"replace\";\r\n  debounceMs?: number;\r\n  throttleMs?: number;\r\n  clearOnDefault?: boolean;\r\n  enableAdvancedFilter?: boolean;\r\n  scroll?: boolean;\r\n  shallow?: boolean;\r\n  startTransition?: React.TransitionStartFunction;\r\n}\r\n\r\nexport function useDataTable<TData>(props: UseDataTableProps<TData>) {\r\n  const {\r\n    columns,\r\n    pageCount = -1,\r\n    initialState,\r\n    queryKeys,\r\n    history = \"replace\",\r\n    debounceMs = DEBOUNCE_MS,\r\n    throttleMs = THROTTLE_MS,\r\n    clearOnDefault = false,\r\n    enableAdvancedFilter = false,\r\n    scroll = false,\r\n    shallow = true,\r\n    startTransition,\r\n    ...tableProps\r\n  } = props;\r\n  const pageKey = queryKeys?.page ?? PAGE_KEY;\r\n  const perPageKey = queryKeys?.perPage ?? PER_PAGE_KEY;\r\n  const sortKey = queryKeys?.sort ?? SORT_KEY;\r\n  const filtersKey = queryKeys?.filters ?? FILTERS_KEY;\r\n  const joinOperatorKey = queryKeys?.joinOperator ?? JOIN_OPERATOR_KEY;\r\n\r\n  const queryStateOptions = React.useMemo<\r\n    Omit<UseQueryStateOptions<string>, \"parse\">\r\n  >(\r\n    () => ({\r\n      history,\r\n      scroll,\r\n      shallow,\r\n      throttleMs,\r\n      debounceMs,\r\n      clearOnDefault,\r\n      startTransition,\r\n    }),\r\n    [\r\n      history,\r\n      scroll,\r\n      shallow,\r\n      throttleMs,\r\n      debounceMs,\r\n      clearOnDefault,\r\n      startTransition,\r\n    ],\r\n  );\r\n\r\n  const [rowSelection, setRowSelection] = React.useState<RowSelectionState>(\r\n    initialState?.rowSelection ?? {},\r\n  );\r\n  const [columnVisibility, setColumnVisibility] =\r\n    React.useState<VisibilityState>(initialState?.columnVisibility ?? {});\r\n\r\n  const [page, setPage] = useQueryState(\r\n    pageKey,\r\n    parseAsInteger.withOptions(queryStateOptions).withDefault(1),\r\n  );\r\n  const [perPage, setPerPage] = useQueryState(\r\n    perPageKey,\r\n    parseAsInteger\r\n      .withOptions(queryStateOptions)\r\n      .withDefault(initialState?.pagination?.pageSize ?? 10),\r\n  );\r\n\r\n  const pagination: PaginationState = React.useMemo(() => {\r\n    return {\r\n      pageIndex: page - 1, // zero-based index -> one-based index\r\n      pageSize: perPage,\r\n    };\r\n  }, [page, perPage]);\r\n\r\n  const onPaginationChange = React.useCallback(\r\n    (updaterOrValue: Updater<PaginationState>) => {\r\n      if (typeof updaterOrValue === \"function\") {\r\n        const newPagination = updaterOrValue(pagination);\r\n        void setPage(newPagination.pageIndex + 1);\r\n        void setPerPage(newPagination.pageSize);\r\n      } else {\r\n        void setPage(updaterOrValue.pageIndex + 1);\r\n        void setPerPage(updaterOrValue.pageSize);\r\n      }\r\n    },\r\n    [pagination, setPage, setPerPage],\r\n  );\r\n\r\n  const columnIds = React.useMemo(() => {\r\n    return new Set(\r\n      columns.map((column) => column.id).filter(Boolean) as string[],\r\n    );\r\n  }, [columns]);\r\n\r\n  const [sorting, setSorting] = useQueryState(\r\n    sortKey,\r\n    getSortingStateParser<TData>(columnIds)\r\n      .withOptions(queryStateOptions)\r\n      .withDefault(initialState?.sorting ?? []),\r\n  );\r\n\r\n  const onSortingChange = React.useCallback(\r\n    (updaterOrValue: Updater<SortingState>) => {\r\n      if (typeof updaterOrValue === \"function\") {\r\n        const newSorting = updaterOrValue(sorting);\r\n        setSorting(newSorting as ExtendedColumnSort<TData>[]);\r\n      } else {\r\n        setSorting(updaterOrValue as ExtendedColumnSort<TData>[]);\r\n      }\r\n    },\r\n    [sorting, setSorting],\r\n  );\r\n\r\n  const filterableColumns = React.useMemo(() => {\r\n    if (enableAdvancedFilter) return [];\r\n\r\n    return columns.filter((column) => column.enableColumnFilter);\r\n  }, [columns, enableAdvancedFilter]);\r\n\r\n  const filterParsers = React.useMemo(() => {\r\n    if (enableAdvancedFilter) return {};\r\n\r\n    return filterableColumns.reduce<\r\n      Record<string, SingleParser<string> | SingleParser<string[]>>\r\n    >((acc, column) => {\r\n      if (column.meta?.options) {\r\n        acc[column.id ?? \"\"] = parseAsArrayOf(\r\n          parseAsString,\r\n          ARRAY_SEPARATOR,\r\n        ).withOptions(queryStateOptions);\r\n      } else {\r\n        acc[column.id ?? \"\"] = parseAsString.withOptions(queryStateOptions);\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }, [filterableColumns, queryStateOptions, enableAdvancedFilter]);\r\n\r\n  const [filterValues, setFilterValues] = useQueryStates(filterParsers);\r\n\r\n  const debouncedSetFilterValues = useDebouncedCallback(\r\n    (values: typeof filterValues) => {\r\n      void setPage(1);\r\n      void setFilterValues(values);\r\n    },\r\n    debounceMs,\r\n  );\r\n\r\n  const initialColumnFilters: ColumnFiltersState = React.useMemo(() => {\r\n    if (enableAdvancedFilter) return [];\r\n\r\n    return Object.entries(filterValues).reduce<ColumnFiltersState>(\r\n      (filters, [key, value]) => {\r\n        if (value !== null) {\r\n          const processedValue = Array.isArray(value)\r\n            ? value\r\n            : typeof value === \"string\" && /[^a-zA-Z0-9]/.test(value)\r\n              ? value.split(/[^a-zA-Z0-9]+/).filter(Boolean)\r\n              : [value];\r\n\r\n          filters.push({\r\n            id: key,\r\n            value: processedValue,\r\n          });\r\n        }\r\n        return filters;\r\n      },\r\n      [],\r\n    );\r\n  }, [filterValues, enableAdvancedFilter]);\r\n\r\n  const [columnFilters, setColumnFilters] =\r\n    React.useState<ColumnFiltersState>(initialColumnFilters);\r\n\r\n  const onColumnFiltersChange = React.useCallback(\r\n    (updaterOrValue: Updater<ColumnFiltersState>) => {\r\n      if (enableAdvancedFilter) return;\r\n\r\n      setColumnFilters((prev) => {\r\n        const next =\r\n          typeof updaterOrValue === \"function\"\r\n            ? updaterOrValue(prev)\r\n            : updaterOrValue;\r\n\r\n        const filterUpdates = next.reduce<\r\n          Record<string, string | string[] | null>\r\n        >((acc, filter) => {\r\n          if (filterableColumns.find((column) => column.id === filter.id)) {\r\n            acc[filter.id] = filter.value as string | string[];\r\n          }\r\n          return acc;\r\n        }, {});\r\n\r\n        for (const prevFilter of prev) {\r\n          if (!next.some((filter) => filter.id === prevFilter.id)) {\r\n            filterUpdates[prevFilter.id] = null;\r\n          }\r\n        }\r\n\r\n        debouncedSetFilterValues(filterUpdates);\r\n        return next;\r\n      });\r\n    },\r\n    [debouncedSetFilterValues, filterableColumns, enableAdvancedFilter],\r\n  );\r\n\r\n  const table = useReactTable({\r\n    ...tableProps,\r\n    columns,\r\n    initialState,\r\n    pageCount,\r\n    state: {\r\n      pagination,\r\n      sorting,\r\n      columnVisibility,\r\n      rowSelection,\r\n      columnFilters,\r\n    },\r\n    defaultColumn: {\r\n      ...tableProps.defaultColumn,\r\n      enableColumnFilter: false,\r\n    },\r\n    enableRowSelection: true,\r\n    onRowSelectionChange: setRowSelection,\r\n    onPaginationChange,\r\n    onSortingChange,\r\n    onColumnFiltersChange,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFacetedRowModel: getFacetedRowModel(),\r\n    getFacetedUniqueValues: getFacetedUniqueValues(),\r\n    getFacetedMinMaxValues: getFacetedMinMaxValues(),\r\n    manualPagination: true,\r\n    manualSorting: true,\r\n    manualFiltering: true,\r\n    meta: {\r\n      ...tableProps.meta,\r\n      queryKeys: {\r\n        page: pageKey,\r\n        perPage: perPageKey,\r\n        sort: sortKey,\r\n        filters: filtersKey,\r\n        joinOperator: joinOperatorKey,\r\n      },\r\n    },\r\n  });\r\n\r\n  return { table, shallow, debounceMs, throttleMs };\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "src/hooks/use-debounced-callback.ts",
      "content": "/**\n * @see https://github.com/mantinedev/mantine/blob/master/packages/@mantine/hooks/src/use-debounced-callback/use-debounced-callback.ts\n */\n\nimport * as React from \"react\";\n\nimport { useCallbackRef } from \"@/hooks/use-callback-ref\";\n\nexport function useDebouncedCallback<T extends (...args: never[]) => unknown>(\n  callback: T,\n  delay: number,\n) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(\n    () => () => window.clearTimeout(debounceTimerRef.current),\n    [],\n  );\n\n  const setValue = React.useCallback(\n    (...args: Parameters<T>) => {\n      window.clearTimeout(debounceTimerRef.current);\n      debounceTimerRef.current = window.setTimeout(\n        () => handleCallback(...args),\n        delay,\n      );\n    },\n    [handleCallback, delay],\n  );\n\n  return setValue;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "src/lib/data-table.ts",
      "content": "import type { Column } from \"@tanstack/react-table\";\r\nimport { dataTableConfig } from \"@/config/data-table\";\r\nimport type {\r\n  ExtendedColumnFilter,\r\n  FilterOperator,\r\n  FilterVariant,\r\n} from \"@/types/data-table\";\r\n\r\nexport function getCommonPinningStyles<TData>({\r\n  column,\r\n  withBorder = false,\r\n}: {\r\n  column: Column<TData>;\r\n  withBorder?: boolean;\r\n}): React.CSSProperties {\r\n  const isPinned = column.getIsPinned();\r\n  const isLastLeftPinnedColumn =\r\n    isPinned === \"left\" && column.getIsLastColumn(\"left\");\r\n  const isFirstRightPinnedColumn =\r\n    isPinned === \"right\" && column.getIsFirstColumn(\"right\");\r\n\r\n  return {\r\n    boxShadow: withBorder\r\n      ? isLastLeftPinnedColumn\r\n        ? \"-4px 0 4px -4px var(--border) inset\"\r\n        : isFirstRightPinnedColumn\r\n          ? \"4px 0 4px -4px var(--border) inset\"\r\n          : undefined\r\n      : undefined,\r\n    left: isPinned === \"left\" ? `${column.getStart(\"left\")}px` : undefined,\r\n    right: isPinned === \"right\" ? `${column.getAfter(\"right\")}px` : undefined,\r\n    opacity: isPinned ? 0.97 : 1,\r\n    position: isPinned ? \"sticky\" : \"relative\",\r\n    background: isPinned ? \"var(--background)\" : \"var(--background)\",\r\n    width: column.getSize(),\r\n    zIndex: isPinned ? 1 : undefined,\r\n  };\r\n}\r\n\r\nexport function getFilterOperators(filterVariant: FilterVariant) {\r\n  const operatorMap: Record<\r\n    FilterVariant,\r\n    { label: string; value: FilterOperator }[]\r\n  > = {\r\n    text: dataTableConfig.textOperators,\r\n    number: dataTableConfig.numericOperators,\r\n    range: dataTableConfig.numericOperators,\r\n    date: dataTableConfig.dateOperators,\r\n    dateRange: dataTableConfig.dateOperators,\r\n    boolean: dataTableConfig.booleanOperators,\r\n    select: dataTableConfig.selectOperators,\r\n    multiSelect: dataTableConfig.multiSelectOperators,\r\n  };\r\n\r\n  return operatorMap[filterVariant] ?? dataTableConfig.textOperators;\r\n}\r\n\r\nexport function getDefaultFilterOperator(filterVariant: FilterVariant) {\r\n  const operators = getFilterOperators(filterVariant);\r\n\r\n  return operators[0]?.value ?? (filterVariant === \"text\" ? \"iLike\" : \"eq\");\r\n}\r\n\r\nexport function getValidFilters<TData>(\r\n  filters: ExtendedColumnFilter<TData>[],\r\n): ExtendedColumnFilter<TData>[] {\r\n  return filters.filter(\r\n    (filter) =>\r\n      filter.operator === \"isEmpty\" ||\r\n      filter.operator === \"isNotEmpty\" ||\r\n      (Array.isArray(filter.value)\r\n        ? filter.value.length > 0\r\n        : filter.value !== \"\" &&\r\n          filter.value !== null &&\r\n          filter.value !== undefined),\r\n  );\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/format.ts",
      "content": "export function formatDate(\n  date: Date | string | number | undefined,\n  opts: Intl.DateTimeFormatOptions = {},\n) {\n  if (!date) return \"\";\n\n  try {\n    return new Intl.DateTimeFormat(\"en-US\", {\n      month: opts.month ?? \"long\",\n      day: opts.day ?? \"numeric\",\n      year: opts.year ?? \"numeric\",\n      ...opts,\n    }).format(new Date(date));\n  } catch (_err) {\n    return \"\";\n  }\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/parsers.ts",
      "content": "import { createParser } from \"nuqs/server\";\nimport { z } from \"zod\";\n\nimport { dataTableConfig } from \"@/config/data-table\";\n\nimport type {\n  ExtendedColumnFilter,\n  ExtendedColumnSort,\n} from \"@/types/data-table\";\n\nconst sortingItemSchema = z.object({\n  id: z.string(),\n  desc: z.boolean(),\n});\n\nexport const getSortingStateParser = <TData>(\n  columnIds?: string[] | Set<string>,\n) => {\n  const validKeys = columnIds\n    ? columnIds instanceof Set\n      ? columnIds\n      : new Set(columnIds)\n    : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(sortingItemSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnSort<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every(\n        (item, index) =>\n          item.id === b[index]?.id && item.desc === b[index]?.desc,\n      ),\n  });\n};\n\nconst filterItemSchema = z.object({\n  id: z.string(),\n  value: z.union([z.string(), z.array(z.string())]),\n  variant: z.enum(dataTableConfig.filterVariants),\n  operator: z.enum(dataTableConfig.operators),\n  filterId: z.string(),\n});\n\nexport type FilterItemSchema = z.infer<typeof filterItemSchema>;\n\nexport const getFiltersStateParser = <TData>(\n  columnIds?: string[] | Set<string>,\n) => {\n  const validKeys = columnIds\n    ? columnIds instanceof Set\n      ? columnIds\n      : new Set(columnIds)\n    : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(filterItemSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnFilter<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every(\n        (filter, index) =>\n          filter.id === b[index]?.id &&\n          filter.value === b[index]?.value &&\n          filter.variant === b[index]?.variant &&\n          filter.operator === b[index]?.operator,\n      ),\n  });\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "src/config/data-table.ts",
      "content": "export type DataTableConfig = typeof dataTableConfig;\n\nexport const dataTableConfig = {\n  textOperators: [\n    { label: \"Contains\", value: \"iLike\" as const },\n    { label: \"Does not contain\", value: \"notILike\" as const },\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  numericOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is less than\", value: \"lt\" as const },\n    { label: \"Is less than or equal to\", value: \"lte\" as const },\n    { label: \"Is greater than\", value: \"gt\" as const },\n    { label: \"Is greater than or equal to\", value: \"gte\" as const },\n    { label: \"Is between\", value: \"isBetween\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  dateOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is before\", value: \"lt\" as const },\n    { label: \"Is after\", value: \"gt\" as const },\n    { label: \"Is on or before\", value: \"lte\" as const },\n    { label: \"Is on or after\", value: \"gte\" as const },\n    { label: \"Is between\", value: \"isBetween\" as const },\n    { label: \"Is relative to today\", value: \"isRelativeToToday\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  selectOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  multiSelectOperators: [\n    { label: \"Has any of\", value: \"inArray\" as const },\n    { label: \"Has none of\", value: \"notInArray\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  booleanOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n  ],\n  sortOrders: [\n    { label: \"Asc\", value: \"asc\" as const },\n    { label: \"Desc\", value: \"desc\" as const },\n  ],\n  filterVariants: [\n    \"text\",\n    \"number\",\n    \"range\",\n    \"date\",\n    \"dateRange\",\n    \"boolean\",\n    \"select\",\n    \"multiSelect\",\n  ] as const,\n  operators: [\n    \"iLike\",\n    \"notILike\",\n    \"eq\",\n    \"ne\",\n    \"inArray\",\n    \"notInArray\",\n    \"isEmpty\",\n    \"isNotEmpty\",\n    \"lt\",\n    \"lte\",\n    \"gt\",\n    \"gte\",\n    \"isBetween\",\n    \"isRelativeToToday\",\n  ] as const,\n  joinOperators: [\"and\", \"or\"] as const,\n};\n",
      "type": "registry:file",
      "target": "src/config/data-table.ts"
    },
    {
      "path": "src/types/data-table.ts",
      "content": "import type { ColumnSort, Row, RowData } from \"@tanstack/react-table\";\r\nimport type { DataTableConfig } from \"@/config/data-table\";\r\nimport type { FilterItemSchema } from \"@/lib/parsers\";\r\n\r\ndeclare module \"@tanstack/react-table\" {\r\n  // biome-ignore lint/correctness/noUnusedVariables: TData is used in the TableMeta interface\r\n  interface TableMeta<TData extends RowData> {\r\n    queryKeys?: QueryKeys;\r\n  }\r\n\r\n  // biome-ignore lint/correctness/noUnusedVariables: TData and TValue are used in the ColumnMeta interface\r\n  interface ColumnMeta<TData extends RowData, TValue> {\r\n    label?: string;\r\n    placeholder?: string;\r\n    variant?: FilterVariant;\r\n    options?: Option[];\r\n    range?: [number, number];\r\n    unit?: string;\r\n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\r\n  }\r\n}\r\n\r\nexport interface QueryKeys {\r\n  page: string;\r\n  perPage: string;\r\n  sort: string;\r\n  filters: string;\r\n  joinOperator: string;\r\n}\r\n\r\nexport interface Option {\r\n  label: string;\r\n  value: string;\r\n  count?: number;\r\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>;\r\n}\r\n\r\nexport type FilterOperator = DataTableConfig[\"operators\"][number];\r\nexport type FilterVariant = DataTableConfig[\"filterVariants\"][number];\r\nexport type JoinOperator = DataTableConfig[\"joinOperators\"][number];\r\n\r\nexport interface ExtendedColumnSort<TData> extends Omit<ColumnSort, \"id\"> {\r\n  id: Extract<keyof TData, string>;\r\n}\r\n\r\nexport interface ExtendedColumnFilter<TData> extends FilterItemSchema {\r\n  id: Extract<keyof TData, string>;\r\n}\r\n\r\nexport interface DataTableRowAction<TData> {\r\n  row: Row<TData>;\r\n  variant: \"update\" | \"delete\";\r\n}\r\n",
      "type": "registry:file",
      "target": "src/types/data-table.ts"
    }
  ]
}