{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table-filter-menu",
  "type": "registry:component",
  "title": "Data Table Filter Menu",
  "description": "A filter menu component for the data table",
  "dependencies": [
    "@tanstack/react-table",
    "lucide-react",
    "motion",
    "nanoid",
    "nuqs"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "calendar",
    "command",
    "input",
    "popover",
    "select"
  ],
  "files": [
    {
      "path": "src/components/data-table/data-table-filter-menu.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Column, Table } from \"@tanstack/react-table\";\r\nimport {\r\n  BadgeCheck,\r\n  CalendarIcon,\r\n  Check,\r\n  ListFilter,\r\n  Text,\r\n  X,\r\n} from \"lucide-react\";\r\nimport { useQueryState } from \"nuqs\";\r\nimport * as React from \"react\";\r\n\r\nimport { DataTableRangeFilter } from \"@/components/data-table/data-table-range-filter\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { useDebouncedCallback } from \"@/hooks/use-debounced-callback\";\r\nimport { getDefaultFilterOperator, getFilterOperators } from \"@/lib/data-table\";\r\nimport { formatDate } from \"@/lib/format\";\r\nimport { generateId } from \"@/lib/id\";\r\nimport { getFiltersStateParser } from \"@/lib/parsers\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { ExtendedColumnFilter, FilterOperator } from \"@/types/data-table\";\r\n\r\nconst DEBOUNCE_MS = 300;\r\nconst THROTTLE_MS = 50;\r\nconst FILTER_SHORTCUT_KEY = \"f\";\r\nconst REMOVE_FILTER_SHORTCUTS = [\"backspace\", \"delete\"];\r\n\r\ninterface DataTableFilterMenuProps<TData>\r\n  extends React.ComponentProps<typeof PopoverContent> {\r\n  table: Table<TData>;\r\n  debounceMs?: number;\r\n  throttleMs?: number;\r\n  shallow?: boolean;\r\n}\r\n\r\nexport function DataTableFilterMenu<TData>({\r\n  table,\r\n  debounceMs = DEBOUNCE_MS,\r\n  throttleMs = THROTTLE_MS,\r\n  shallow = true,\r\n  align = \"start\",\r\n  ...props\r\n}: DataTableFilterMenuProps<TData>) {\r\n  const id = React.useId();\r\n\r\n  const columns = React.useMemo(() => {\r\n    return table\r\n      .getAllColumns()\r\n      .filter((column) => column.columnDef.enableColumnFilter);\r\n  }, [table]);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedColumn, setSelectedColumn] =\r\n    React.useState<Column<TData> | null>(null);\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  const onOpenChange = React.useCallback((open: boolean) => {\r\n    setOpen(open);\r\n\r\n    if (!open) {\r\n      setTimeout(() => {\r\n        setSelectedColumn(null);\r\n        setInputValue(\"\");\r\n      }, 100);\r\n    }\r\n  }, []);\r\n\r\n  const onInputKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n      if (\r\n        REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()) &&\r\n        !inputValue &&\r\n        selectedColumn\r\n      ) {\r\n        event.preventDefault();\r\n        setSelectedColumn(null);\r\n      }\r\n    },\r\n    [inputValue, selectedColumn],\r\n  );\r\n\r\n  const [filters, setFilters] = useQueryState(\r\n    table.options.meta?.queryKeys?.filters ?? \"filters\",\r\n    getFiltersStateParser<TData>(columns.map((field) => field.id))\r\n      .withDefault([])\r\n      .withOptions({\r\n        clearOnDefault: true,\r\n        shallow,\r\n        throttleMs,\r\n      }),\r\n  );\r\n  const debouncedSetFilters = useDebouncedCallback(setFilters, debounceMs);\r\n\r\n  const onFilterAdd = React.useCallback(\r\n    (column: Column<TData>, value: string) => {\r\n      if (!value.trim() && column.columnDef.meta?.variant !== \"boolean\") {\r\n        return;\r\n      }\r\n\r\n      const filterValue =\r\n        column.columnDef.meta?.variant === \"multiSelect\" ? [value] : value;\r\n\r\n      const newFilter: ExtendedColumnFilter<TData> = {\r\n        id: column.id as Extract<keyof TData, string>,\r\n        value: filterValue,\r\n        variant: column.columnDef.meta?.variant ?? \"text\",\r\n        operator: getDefaultFilterOperator(\r\n          column.columnDef.meta?.variant ?? \"text\",\r\n        ),\r\n        filterId: generateId({ length: 8 }),\r\n      };\r\n\r\n      debouncedSetFilters([...filters, newFilter]);\r\n      setOpen(false);\r\n\r\n      setTimeout(() => {\r\n        setSelectedColumn(null);\r\n        setInputValue(\"\");\r\n      }, 100);\r\n    },\r\n    [filters, debouncedSetFilters],\r\n  );\r\n\r\n  const onFilterRemove = React.useCallback(\r\n    (filterId: string) => {\r\n      const updatedFilters = filters.filter(\r\n        (filter) => filter.filterId !== filterId,\r\n      );\r\n      debouncedSetFilters(updatedFilters);\r\n      requestAnimationFrame(() => {\r\n        triggerRef.current?.focus();\r\n      });\r\n    },\r\n    [filters, debouncedSetFilters],\r\n  );\r\n\r\n  const onFilterUpdate = React.useCallback(\r\n    (\r\n      filterId: string,\r\n      updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\r\n    ) => {\r\n      debouncedSetFilters((prevFilters) => {\r\n        const updatedFilters = prevFilters.map((filter) => {\r\n          if (filter.filterId === filterId) {\r\n            return { ...filter, ...updates } as ExtendedColumnFilter<TData>;\r\n          }\r\n          return filter;\r\n        });\r\n        return updatedFilters;\r\n      });\r\n    },\r\n    [debouncedSetFilters],\r\n  );\r\n\r\n  const onFiltersReset = React.useCallback(() => {\r\n    debouncedSetFilters([]);\r\n  }, [debouncedSetFilters]);\r\n\r\n  React.useEffect(() => {\r\n    function onKeyDown(event: KeyboardEvent) {\r\n      if (\r\n        event.target instanceof HTMLInputElement ||\r\n        event.target instanceof HTMLTextAreaElement ||\r\n        (event.target instanceof HTMLElement &&\r\n          event.target.contentEditable === \"true\")\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (\r\n        event.key.toLowerCase() === FILTER_SHORTCUT_KEY &&\r\n        (event.ctrlKey || event.metaKey) &&\r\n        event.shiftKey\r\n      ) {\r\n        event.preventDefault();\r\n        setOpen((prev) => !prev);\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\r\n  }, []);\r\n\r\n  const onTriggerKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLButtonElement>) => {\r\n      if (\r\n        REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()) &&\r\n        filters.length > 0\r\n      ) {\r\n        event.preventDefault();\r\n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \"\");\r\n      }\r\n    },\r\n    [filters, onFilterRemove],\r\n  );\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap items-center gap-2\">\r\n      {filters.map((filter) => (\r\n        <DataTableFilterItem\r\n          key={filter.filterId}\r\n          filter={filter}\r\n          filterItemId={`${id}-filter-${filter.filterId}`}\r\n          columns={columns}\r\n          onFilterUpdate={onFilterUpdate}\r\n          onFilterRemove={onFilterRemove}\r\n        />\r\n      ))}\r\n      {filters.length > 0 && (\r\n        <Button\r\n          aria-label=\"Reset all filters\"\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          className=\"size-8\"\r\n          onClick={onFiltersReset}\r\n        >\r\n          <X />\r\n        </Button>\r\n      )}\r\n      <Popover open={open} onOpenChange={onOpenChange}>\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            aria-label=\"Open filter command menu\"\r\n            variant=\"outline\"\r\n            size={filters.length > 0 ? \"icon\" : \"sm\"}\r\n            className={cn(filters.length > 0 && \"size-8\", \"h-8 font-normal\")}\r\n            ref={triggerRef}\r\n            onKeyDown={onTriggerKeyDown}\r\n          >\r\n            <ListFilter className=\"text-muted-foreground\" />\r\n            {filters.length > 0 ? null : \"Filter\"}\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent\r\n          align={align}\r\n          className=\"w-full max-w-[var(--radix-popover-content-available-width)] origin-[var(--radix-popover-content-transform-origin)] p-0\"\r\n          {...props}\r\n        >\r\n          <Command loop className=\"[&_[cmdk-input-wrapper]_svg]:hidden\">\r\n            <CommandInput\r\n              ref={inputRef}\r\n              placeholder={\r\n                selectedColumn\r\n                  ? (selectedColumn.columnDef.meta?.label ?? selectedColumn.id)\r\n                  : \"Search fields...\"\r\n              }\r\n              value={inputValue}\r\n              onValueChange={setInputValue}\r\n              onKeyDown={onInputKeyDown}\r\n            />\r\n            <CommandList>\r\n              {selectedColumn ? (\r\n                <>\r\n                  {selectedColumn.columnDef.meta?.options && (\r\n                    <CommandEmpty>No options found.</CommandEmpty>\r\n                  )}\r\n                  <FilterValueSelector\r\n                    column={selectedColumn}\r\n                    value={inputValue}\r\n                    onSelect={(value) => onFilterAdd(selectedColumn, value)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <CommandEmpty>No fields found.</CommandEmpty>\r\n                  <CommandGroup>\r\n                    {columns.map((column) => (\r\n                      <CommandItem\r\n                        key={column.id}\r\n                        value={column.id}\r\n                        onSelect={() => {\r\n                          setSelectedColumn(column);\r\n                          setInputValue(\"\");\r\n                          requestAnimationFrame(() => {\r\n                            inputRef.current?.focus();\r\n                          });\r\n                        }}\r\n                      >\r\n                        {column.columnDef.meta?.icon && (\r\n                          <column.columnDef.meta.icon />\r\n                        )}\r\n                        <span className=\"truncate\">\r\n                          {column.columnDef.meta?.label ?? column.id}\r\n                        </span>\r\n                      </CommandItem>\r\n                    ))}\r\n                  </CommandGroup>\r\n                </>\r\n              )}\r\n            </CommandList>\r\n          </Command>\r\n        </PopoverContent>\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface DataTableFilterItemProps<TData> {\r\n  filter: ExtendedColumnFilter<TData>;\r\n  filterItemId: string;\r\n  columns: Column<TData>[];\r\n  onFilterUpdate: (\r\n    filterId: string,\r\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\r\n  ) => void;\r\n  onFilterRemove: (filterId: string) => void;\r\n}\r\n\r\nfunction DataTableFilterItem<TData>({\r\n  filter,\r\n  filterItemId,\r\n  columns,\r\n  onFilterUpdate,\r\n  onFilterRemove,\r\n}: DataTableFilterItemProps<TData>) {\r\n  {\r\n    const [showFieldSelector, setShowFieldSelector] = React.useState(false);\r\n    const [showOperatorSelector, setShowOperatorSelector] =\r\n      React.useState(false);\r\n    const [showValueSelector, setShowValueSelector] = React.useState(false);\r\n\r\n    const column = columns.find((column) => column.id === filter.id);\r\n\r\n    const operatorListboxId = `${filterItemId}-operator-listbox`;\r\n    const inputId = `${filterItemId}-input`;\r\n\r\n    const columnMeta = column?.columnDef.meta;\r\n    const filterOperators = getFilterOperators(filter.variant);\r\n\r\n    const onItemKeyDown = React.useCallback(\r\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (\r\n          event.target instanceof HTMLInputElement ||\r\n          event.target instanceof HTMLTextAreaElement\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        if (showFieldSelector || showOperatorSelector || showValueSelector) {\r\n          return;\r\n        }\r\n\r\n        if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase())) {\r\n          event.preventDefault();\r\n          onFilterRemove(filter.filterId);\r\n        }\r\n      },\r\n      [\r\n        filter.filterId,\r\n        showFieldSelector,\r\n        showOperatorSelector,\r\n        showValueSelector,\r\n        onFilterRemove,\r\n      ],\r\n    );\r\n\r\n    if (!column) return null;\r\n\r\n    return (\r\n      <div\r\n        key={filter.filterId}\r\n        role=\"listitem\"\r\n        id={filterItemId}\r\n        className=\"flex h-8 items-center rounded-md bg-background\"\r\n        onKeyDown={onItemKeyDown}\r\n      >\r\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\r\n          <PopoverTrigger asChild>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              className=\"rounded-none rounded-l-md border border-r-0 font-normal dark:bg-input/30\"\r\n            >\r\n              {columnMeta?.icon && (\r\n                <columnMeta.icon className=\"text-muted-foreground\" />\r\n              )}\r\n              {columnMeta?.label ?? column.id}\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent\r\n            align=\"start\"\r\n            className=\"w-48 origin-[var(--radix-popover-content-transform-origin)] p-0\"\r\n          >\r\n            <Command loop>\r\n              <CommandInput placeholder=\"Search fields...\" />\r\n              <CommandList>\r\n                <CommandEmpty>No fields found.</CommandEmpty>\r\n                <CommandGroup>\r\n                  {columns.map((column) => (\r\n                    <CommandItem\r\n                      key={column.id}\r\n                      value={column.id}\r\n                      onSelect={() => {\r\n                        onFilterUpdate(filter.filterId, {\r\n                          id: column.id as Extract<keyof TData, string>,\r\n                          variant: column.columnDef.meta?.variant ?? \"text\",\r\n                          operator: getDefaultFilterOperator(\r\n                            column.columnDef.meta?.variant ?? \"text\",\r\n                          ),\r\n                          value: \"\",\r\n                        });\r\n\r\n                        setShowFieldSelector(false);\r\n                      }}\r\n                    >\r\n                      {column.columnDef.meta?.icon && (\r\n                        <column.columnDef.meta.icon />\r\n                      )}\r\n                      <span className=\"truncate\">\r\n                        {column.columnDef.meta?.label ?? column.id}\r\n                      </span>\r\n                      <Check\r\n                        className={cn(\r\n                          \"ml-auto\",\r\n                          column.id === filter.id ? \"opacity-100\" : \"opacity-0\",\r\n                        )}\r\n                      />\r\n                    </CommandItem>\r\n                  ))}\r\n                </CommandGroup>\r\n              </CommandList>\r\n            </Command>\r\n          </PopoverContent>\r\n        </Popover>\r\n        <Select\r\n          open={showOperatorSelector}\r\n          onOpenChange={setShowOperatorSelector}\r\n          value={filter.operator}\r\n          onValueChange={(value: FilterOperator) =>\r\n            onFilterUpdate(filter.filterId, {\r\n              operator: value,\r\n              value:\r\n                value === \"isEmpty\" || value === \"isNotEmpty\"\r\n                  ? \"\"\r\n                  : filter.value,\r\n            })\r\n          }\r\n        >\r\n          <SelectTrigger\r\n            aria-controls={operatorListboxId}\r\n            className=\"h-8 rounded-none border-r-0 px-2.5 lowercase [&[data-size]]:h-8 [&_svg]:hidden\"\r\n          >\r\n            <SelectValue placeholder={filter.operator} />\r\n          </SelectTrigger>\r\n          <SelectContent\r\n            id={operatorListboxId}\r\n            className=\"origin-[var(--radix-select-content-transform-origin)]\"\r\n          >\r\n            {filterOperators.map((operator) => (\r\n              <SelectItem\r\n                key={operator.value}\r\n                className=\"lowercase\"\r\n                value={operator.value}\r\n              >\r\n                {operator.label}\r\n              </SelectItem>\r\n            ))}\r\n          </SelectContent>\r\n        </Select>\r\n        {onFilterInputRender({\r\n          filter,\r\n          column,\r\n          inputId,\r\n          onFilterUpdate,\r\n          showValueSelector,\r\n          setShowValueSelector,\r\n        })}\r\n        <Button\r\n          aria-controls={filterItemId}\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className=\"h-full rounded-none rounded-r-md border border-l-0 px-1.5 font-normal dark:bg-input/30\"\r\n          onClick={() => onFilterRemove(filter.filterId)}\r\n        >\r\n          <X className=\"size-3.5\" />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface FilterValueSelectorProps<TData> {\r\n  column: Column<TData>;\r\n  value: string;\r\n  onSelect: (value: string) => void;\r\n}\r\n\r\nfunction FilterValueSelector<TData>({\r\n  column,\r\n  value,\r\n  onSelect,\r\n}: FilterValueSelectorProps<TData>) {\r\n  const variant = column.columnDef.meta?.variant ?? \"text\";\r\n\r\n  switch (variant) {\r\n    case \"boolean\":\r\n      return (\r\n        <CommandGroup>\r\n          <CommandItem value=\"true\" onSelect={() => onSelect(\"true\")}>\r\n            True\r\n          </CommandItem>\r\n          <CommandItem value=\"false\" onSelect={() => onSelect(\"false\")}>\r\n            False\r\n          </CommandItem>\r\n        </CommandGroup>\r\n      );\r\n\r\n    case \"select\":\r\n    case \"multiSelect\":\r\n      return (\r\n        <CommandGroup>\r\n          {column.columnDef.meta?.options?.map((option) => (\r\n            <CommandItem\r\n              key={option.value}\r\n              value={option.value}\r\n              onSelect={() => onSelect(option.value)}\r\n            >\r\n              {option.icon && <option.icon />}\r\n              <span className=\"truncate\">{option.label}</span>\r\n              {option.count && (\r\n                <span className=\"ml-auto font-mono text-xs\">\r\n                  {option.count}\r\n                </span>\r\n              )}\r\n            </CommandItem>\r\n          ))}\r\n        </CommandGroup>\r\n      );\r\n\r\n    case \"date\":\r\n    case \"dateRange\":\r\n      return (\r\n        <Calendar\r\n          autoFocus\r\n          captionLayout=\"dropdown\"\r\n          mode=\"single\"\r\n          selected={value ? new Date(value) : undefined}\r\n          onSelect={(date) => onSelect(date?.getTime().toString() ?? \"\")}\r\n        />\r\n      );\r\n\r\n    default: {\r\n      const isEmpty = !value.trim();\r\n\r\n      return (\r\n        <CommandGroup>\r\n          <CommandItem\r\n            value={value}\r\n            onSelect={() => onSelect(value)}\r\n            disabled={isEmpty}\r\n          >\r\n            {isEmpty ? (\r\n              <>\r\n                <Text />\r\n                <span>Type to add filter...</span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <BadgeCheck />\r\n                <span className=\"truncate\">Filter by &quot;{value}&quot;</span>\r\n              </>\r\n            )}\r\n          </CommandItem>\r\n        </CommandGroup>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction onFilterInputRender<TData>({\r\n  filter,\r\n  column,\r\n  inputId,\r\n  onFilterUpdate,\r\n  showValueSelector,\r\n  setShowValueSelector,\r\n}: {\r\n  filter: ExtendedColumnFilter<TData>;\r\n  column: Column<TData>;\r\n  inputId: string;\r\n  onFilterUpdate: (\r\n    filterId: string,\r\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\r\n  ) => void;\r\n  showValueSelector: boolean;\r\n  setShowValueSelector: (value: boolean) => void;\r\n}) {\r\n  if (filter.operator === \"isEmpty\" || filter.operator === \"isNotEmpty\") {\r\n    return (\r\n      <div\r\n        id={inputId}\r\n        role=\"status\"\r\n        aria-label={`${column.columnDef.meta?.label} filter is ${\r\n          filter.operator === \"isEmpty\" ? \"empty\" : \"not empty\"\r\n        }`}\r\n        aria-live=\"polite\"\r\n        className=\"h-full w-16 rounded-none border bg-transparent px-1.5 py-0.5 text-muted-foreground dark:bg-input/30\"\r\n      />\r\n    );\r\n  }\r\n\r\n  switch (filter.variant) {\r\n    case \"text\":\r\n    case \"number\":\r\n    case \"range\": {\r\n      if (\r\n        (filter.variant === \"range\" && filter.operator === \"isBetween\") ||\r\n        filter.operator === \"isBetween\"\r\n      ) {\r\n        return (\r\n          <DataTableRangeFilter\r\n            filter={filter}\r\n            column={column}\r\n            inputId={inputId}\r\n            onFilterUpdate={onFilterUpdate}\r\n            className=\"size-full max-w-28 gap-0 [&_[data-slot='range-min']]:border-r-0 [&_input]:rounded-none [&_input]:px-1.5\"\r\n          />\r\n        );\r\n      }\r\n\r\n      const isNumber =\r\n        filter.variant === \"number\" || filter.variant === \"range\";\r\n\r\n      return (\r\n        <Input\r\n          id={inputId}\r\n          type={isNumber ? \"number\" : \"text\"}\r\n          inputMode={isNumber ? \"numeric\" : undefined}\r\n          placeholder={column.columnDef.meta?.placeholder ?? \"Enter value...\"}\r\n          className=\"h-full w-24 rounded-none px-1.5\"\r\n          defaultValue={typeof filter.value === \"string\" ? filter.value : \"\"}\r\n          onChange={(event) =>\r\n            onFilterUpdate(filter.filterId, { value: event.target.value })\r\n          }\r\n        />\r\n      );\r\n    }\r\n\r\n    case \"boolean\": {\r\n      const inputListboxId = `${inputId}-listbox`;\r\n\r\n      return (\r\n        <Select\r\n          open={showValueSelector}\r\n          onOpenChange={setShowValueSelector}\r\n          value={typeof filter.value === \"string\" ? filter.value : \"true\"}\r\n          onValueChange={(value: \"true\" | \"false\") =>\r\n            onFilterUpdate(filter.filterId, { value })\r\n          }\r\n        >\r\n          <SelectTrigger\r\n            id={inputId}\r\n            aria-controls={inputListboxId}\r\n            className=\"rounded-none bg-transparent px-1.5 py-0.5 [&_svg]:hidden\"\r\n          >\r\n            <SelectValue placeholder={filter.value ? \"True\" : \"False\"} />\r\n          </SelectTrigger>\r\n          <SelectContent id={inputListboxId}>\r\n            <SelectItem value=\"true\">True</SelectItem>\r\n            <SelectItem value=\"false\">False</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      );\r\n    }\r\n\r\n    case \"select\":\r\n    case \"multiSelect\": {\r\n      const inputListboxId = `${inputId}-listbox`;\r\n\r\n      const options = column.columnDef.meta?.options ?? [];\r\n      const selectedValues = Array.isArray(filter.value)\r\n        ? filter.value\r\n        : [filter.value];\r\n\r\n      const selectedOptions = options.filter((option) =>\r\n        selectedValues.includes(option.value),\r\n      );\r\n\r\n      return (\r\n        <Popover open={showValueSelector} onOpenChange={setShowValueSelector}>\r\n          <PopoverTrigger asChild>\r\n            <Button\r\n              id={inputId}\r\n              aria-controls={inputListboxId}\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              className=\"h-full min-w-16 rounded-none border px-1.5 font-normal dark:bg-input/30\"\r\n            >\r\n              {selectedOptions.length === 0 ? (\r\n                filter.variant === \"multiSelect\" ? (\r\n                  \"Select options...\"\r\n                ) : (\r\n                  \"Select option...\"\r\n                )\r\n              ) : (\r\n                <>\r\n                  <div className=\"-space-x-2 flex items-center rtl:space-x-reverse\">\r\n                    {selectedOptions.map((selectedOption) =>\r\n                      selectedOption.icon ? (\r\n                        <div\r\n                          key={selectedOption.value}\r\n                          className=\"rounded-full border bg-background p-0.5\"\r\n                        >\r\n                          <selectedOption.icon className=\"size-3.5\" />\r\n                        </div>\r\n                      ) : null,\r\n                    )}\r\n                  </div>\r\n                  <span className=\"truncate\">\r\n                    {selectedOptions.length > 1\r\n                      ? `${selectedOptions.length} selected`\r\n                      : selectedOptions[0]?.label}\r\n                  </span>\r\n                </>\r\n              )}\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent\r\n            id={inputListboxId}\r\n            align=\"start\"\r\n            className=\"w-48 origin-[var(--radix-popover-content-transform-origin)] p-0\"\r\n          >\r\n            <Command>\r\n              <CommandInput placeholder=\"Search options...\" />\r\n              <CommandList>\r\n                <CommandEmpty>No options found.</CommandEmpty>\r\n                <CommandGroup>\r\n                  {options.map((option) => (\r\n                    <CommandItem\r\n                      key={option.value}\r\n                      value={option.value}\r\n                      onSelect={() => {\r\n                        const value =\r\n                          filter.variant === \"multiSelect\"\r\n                            ? selectedValues.includes(option.value)\r\n                              ? selectedValues.filter((v) => v !== option.value)\r\n                              : [...selectedValues, option.value]\r\n                            : option.value;\r\n                        onFilterUpdate(filter.filterId, { value });\r\n                      }}\r\n                    >\r\n                      {option.icon && <option.icon />}\r\n                      <span className=\"truncate\">{option.label}</span>\r\n                      {filter.variant === \"multiSelect\" && (\r\n                        <Check\r\n                          className={cn(\r\n                            \"ml-auto\",\r\n                            selectedValues.includes(option.value)\r\n                              ? \"opacity-100\"\r\n                              : \"opacity-0\",\r\n                          )}\r\n                        />\r\n                      )}\r\n                    </CommandItem>\r\n                  ))}\r\n                </CommandGroup>\r\n              </CommandList>\r\n            </Command>\r\n          </PopoverContent>\r\n        </Popover>\r\n      );\r\n    }\r\n\r\n    case \"date\":\r\n    case \"dateRange\": {\r\n      const inputListboxId = `${inputId}-listbox`;\r\n\r\n      const dateValue = Array.isArray(filter.value)\r\n        ? filter.value.filter(Boolean)\r\n        : [filter.value, filter.value].filter(Boolean);\r\n\r\n      const displayValue =\r\n        filter.operator === \"isBetween\" && dateValue.length === 2\r\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\r\n              new Date(Number(dateValue[1])),\r\n            )}`\r\n          : dateValue[0]\r\n            ? formatDate(new Date(Number(dateValue[0])))\r\n            : \"Pick date...\";\r\n\r\n      return (\r\n        <Popover open={showValueSelector} onOpenChange={setShowValueSelector}>\r\n          <PopoverTrigger asChild>\r\n            <Button\r\n              id={inputId}\r\n              aria-controls={inputListboxId}\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              className={cn(\r\n                \"h-full rounded-none border px-1.5 font-normal dark:bg-input/30\",\r\n                !filter.value && \"text-muted-foreground\",\r\n              )}\r\n            >\r\n              <CalendarIcon className=\"size-3.5\" />\r\n              <span className=\"truncate\">{displayValue}</span>\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent\r\n            id={inputListboxId}\r\n            align=\"start\"\r\n            className=\"w-auto origin-[var(--radix-popover-content-transform-origin)] p-0\"\r\n          >\r\n            {filter.operator === \"isBetween\" ? (\r\n              <Calendar\r\n                autoFocus\r\n                captionLayout=\"dropdown\"\r\n                mode=\"range\"\r\n                selected={\r\n                  dateValue.length === 2\r\n                    ? {\r\n                        from: new Date(Number(dateValue[0])),\r\n                        to: new Date(Number(dateValue[1])),\r\n                      }\r\n                    : {\r\n                        from: new Date(),\r\n                        to: new Date(),\r\n                      }\r\n                }\r\n                onSelect={(date) => {\r\n                  onFilterUpdate(filter.filterId, {\r\n                    value: date\r\n                      ? [\r\n                          (date.from?.getTime() ?? \"\").toString(),\r\n                          (date.to?.getTime() ?? \"\").toString(),\r\n                        ]\r\n                      : [],\r\n                  });\r\n                }}\r\n              />\r\n            ) : (\r\n              <Calendar\r\n                autoFocus\r\n                captionLayout=\"dropdown\"\r\n                mode=\"single\"\r\n                selected={\r\n                  dateValue[0] ? new Date(Number(dateValue[0])) : undefined\r\n                }\r\n                onSelect={(date) => {\r\n                  onFilterUpdate(filter.filterId, {\r\n                    value: (date?.getTime() ?? \"\").toString(),\r\n                  });\r\n                }}\r\n              />\r\n            )}\r\n          </PopoverContent>\r\n        </Popover>\r\n      );\r\n    }\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-filter-menu.tsx"
    },
    {
      "path": "src/components/data-table/data-table-range-filter.tsx",
      "content": "\"use client\";\n\nimport type { Column } from \"@tanstack/react-table\";\nimport * as React from \"react\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport type { ExtendedColumnFilter } from \"@/types/data-table\";\n\ninterface DataTableRangeFilterProps<TData> extends React.ComponentProps<\"div\"> {\n  filter: ExtendedColumnFilter<TData>;\n  column: Column<TData>;\n  inputId: string;\n  onFilterUpdate: (\n    filterId: string,\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\n  ) => void;\n}\n\nexport function DataTableRangeFilter<TData>({\n  filter,\n  column,\n  inputId,\n  onFilterUpdate,\n  className,\n  ...props\n}: DataTableRangeFilterProps<TData>) {\n  const meta = column.columnDef.meta;\n\n  const [min, max] = React.useMemo(() => {\n    const range = column.columnDef.meta?.range;\n    if (range) return range;\n\n    const values = column.getFacetedMinMaxValues();\n    if (!values) return [0, 100];\n\n    return [values[0], values[1]];\n  }, [column]);\n\n  const formatValue = React.useCallback(\n    (value: string | number | undefined) => {\n      if (value === undefined || value === \"\") return \"\";\n      const numValue = Number(value);\n      return Number.isNaN(numValue)\n        ? \"\"\n        : numValue.toLocaleString(undefined, {\n            maximumFractionDigits: 0,\n          });\n    },\n    [],\n  );\n\n  const value = React.useMemo(() => {\n    if (Array.isArray(filter.value)) return filter.value.map(formatValue);\n    return [formatValue(filter.value), \"\"];\n  }, [filter.value, formatValue]);\n\n  const onRangeValueChange = React.useCallback(\n    (value: string, isMin?: boolean) => {\n      const numValue = Number(value);\n      const currentValues = Array.isArray(filter.value)\n        ? filter.value\n        : [\"\", \"\"];\n      const otherValue = isMin\n        ? (currentValues[1] ?? \"\")\n        : (currentValues[0] ?? \"\");\n\n      if (\n        value === \"\" ||\n        (!Number.isNaN(numValue) &&\n          (isMin\n            ? numValue >= min && numValue <= (Number(otherValue) || max)\n            : numValue <= max && numValue >= (Number(otherValue) || min)))\n      ) {\n        onFilterUpdate(filter.filterId, {\n          value: isMin ? [value, otherValue] : [otherValue, value],\n        });\n      }\n    },\n    [filter.filterId, filter.value, min, max, onFilterUpdate],\n  );\n\n  return (\n    <div\n      data-slot=\"range\"\n      className={cn(\"flex w-full items-center gap-2\", className)}\n      {...props}\n    >\n      <Input\n        id={`${inputId}-min`}\n        type=\"number\"\n        aria-label={`${meta?.label} minimum value`}\n        aria-valuemin={min}\n        aria-valuemax={max}\n        data-slot=\"range-min\"\n        inputMode=\"numeric\"\n        placeholder={min.toString()}\n        min={min}\n        max={max}\n        className=\"h-8 w-full rounded\"\n        defaultValue={value[0]}\n        onChange={(event) => onRangeValueChange(event.target.value, true)}\n      />\n      <span className=\"sr-only shrink-0 text-muted-foreground\">to</span>\n      <Input\n        id={`${inputId}-max`}\n        type=\"number\"\n        aria-label={`${meta?.label} maximum value`}\n        aria-valuemin={min}\n        aria-valuemax={max}\n        data-slot=\"range-max\"\n        inputMode=\"numeric\"\n        placeholder={max.toString()}\n        min={min}\n        max={max}\n        className=\"h-8 w-full rounded\"\n        defaultValue={value[1]}\n        onChange={(event) => onRangeValueChange(event.target.value)}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-range-filter.tsx"
    },
    {
      "path": "src/components/data-table/data-table-advanced-toolbar.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Table } from \"@tanstack/react-table\";\r\nimport type * as React from \"react\";\r\n\r\nimport { DataTableViewOptions } from \"@/components/data-table/data-table-view-options\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface DataTableAdvancedToolbarProps<TData>\r\n  extends React.ComponentProps<\"div\"> {\r\n  table: Table<TData>;\r\n}\r\n\r\nexport function DataTableAdvancedToolbar<TData>({\r\n  table,\r\n  children,\r\n  className,\r\n  ...props\r\n}: DataTableAdvancedToolbarProps<TData>) {\r\n  return (\r\n    <div\r\n      role=\"toolbar\"\r\n      aria-orientation=\"horizontal\"\r\n      className={cn(\r\n        \"flex w-full items-start justify-between gap-2 p-1\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      <div className=\"flex flex-1 flex-wrap items-center gap-2\">{children}</div>\r\n      <div className=\"flex items-center gap-2\">\r\n        <DataTableViewOptions table={table} align=\"end\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-advanced-toolbar.tsx"
    },
    {
      "path": "src/hooks/use-callback-ref.ts",
      "content": "import * as React from \"react\";\n\n/**\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/use-callback-ref/src/useCallbackRef.tsx\n */\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: never[]) => unknown>(\n  callback: T | undefined,\n): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(\n    () => ((...args) => callbackRef.current?.(...args)) as T,\n    [],\n  );\n}\n\nexport { useCallbackRef };\n",
      "type": "registry:hook"
    },
    {
      "path": "src/hooks/use-debounced-callback.ts",
      "content": "/**\n * @see https://github.com/mantinedev/mantine/blob/master/packages/@mantine/hooks/src/use-debounced-callback/use-debounced-callback.ts\n */\n\nimport * as React from \"react\";\n\nimport { useCallbackRef } from \"@/hooks/use-callback-ref\";\n\nexport function useDebouncedCallback<T extends (...args: never[]) => unknown>(\n  callback: T,\n  delay: number,\n) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(\n    () => () => window.clearTimeout(debounceTimerRef.current),\n    [],\n  );\n\n  const setValue = React.useCallback(\n    (...args: Parameters<T>) => {\n      window.clearTimeout(debounceTimerRef.current);\n      debounceTimerRef.current = window.setTimeout(\n        () => handleCallback(...args),\n        delay,\n      );\n    },\n    [handleCallback, delay],\n  );\n\n  return setValue;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "src/lib/data-table.ts",
      "content": "import type { Column } from \"@tanstack/react-table\";\r\nimport { dataTableConfig } from \"@/config/data-table\";\r\nimport type {\r\n  ExtendedColumnFilter,\r\n  FilterOperator,\r\n  FilterVariant,\r\n} from \"@/types/data-table\";\r\n\r\nexport function getCommonPinningStyles<TData>({\r\n  column,\r\n  withBorder = false,\r\n}: {\r\n  column: Column<TData>;\r\n  withBorder?: boolean;\r\n}): React.CSSProperties {\r\n  const isPinned = column.getIsPinned();\r\n  const isLastLeftPinnedColumn =\r\n    isPinned === \"left\" && column.getIsLastColumn(\"left\");\r\n  const isFirstRightPinnedColumn =\r\n    isPinned === \"right\" && column.getIsFirstColumn(\"right\");\r\n\r\n  return {\r\n    boxShadow: withBorder\r\n      ? isLastLeftPinnedColumn\r\n        ? \"-4px 0 4px -4px var(--border) inset\"\r\n        : isFirstRightPinnedColumn\r\n          ? \"4px 0 4px -4px var(--border) inset\"\r\n          : undefined\r\n      : undefined,\r\n    left: isPinned === \"left\" ? `${column.getStart(\"left\")}px` : undefined,\r\n    right: isPinned === \"right\" ? `${column.getAfter(\"right\")}px` : undefined,\r\n    opacity: isPinned ? 0.97 : 1,\r\n    position: isPinned ? \"sticky\" : \"relative\",\r\n    background: isPinned ? \"var(--background)\" : \"var(--background)\",\r\n    width: column.getSize(),\r\n    zIndex: isPinned ? 1 : undefined,\r\n  };\r\n}\r\n\r\nexport function getFilterOperators(filterVariant: FilterVariant) {\r\n  const operatorMap: Record<\r\n    FilterVariant,\r\n    { label: string; value: FilterOperator }[]\r\n  > = {\r\n    text: dataTableConfig.textOperators,\r\n    number: dataTableConfig.numericOperators,\r\n    range: dataTableConfig.numericOperators,\r\n    date: dataTableConfig.dateOperators,\r\n    dateRange: dataTableConfig.dateOperators,\r\n    boolean: dataTableConfig.booleanOperators,\r\n    select: dataTableConfig.selectOperators,\r\n    multiSelect: dataTableConfig.multiSelectOperators,\r\n  };\r\n\r\n  return operatorMap[filterVariant] ?? dataTableConfig.textOperators;\r\n}\r\n\r\nexport function getDefaultFilterOperator(filterVariant: FilterVariant) {\r\n  const operators = getFilterOperators(filterVariant);\r\n\r\n  return operators[0]?.value ?? (filterVariant === \"text\" ? \"iLike\" : \"eq\");\r\n}\r\n\r\nexport function getValidFilters<TData>(\r\n  filters: ExtendedColumnFilter<TData>[],\r\n): ExtendedColumnFilter<TData>[] {\r\n  return filters.filter(\r\n    (filter) =>\r\n      filter.operator === \"isEmpty\" ||\r\n      filter.operator === \"isNotEmpty\" ||\r\n      (Array.isArray(filter.value)\r\n        ? filter.value.length > 0\r\n        : filter.value !== \"\" &&\r\n          filter.value !== null &&\r\n          filter.value !== undefined),\r\n  );\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/format.ts",
      "content": "export function formatDate(\n  date: Date | string | number | undefined,\n  opts: Intl.DateTimeFormatOptions = {},\n) {\n  if (!date) return \"\";\n\n  try {\n    return new Intl.DateTimeFormat(\"en-US\", {\n      month: opts.month ?? \"long\",\n      day: opts.day ?? \"numeric\",\n      year: opts.year ?? \"numeric\",\n      ...opts,\n    }).format(new Date(date));\n  } catch (_err) {\n    return \"\";\n  }\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/id.ts",
      "content": "import { customAlphabet } from \"nanoid\";\n\nconst prefixes: Record<string, unknown> = {};\n\ninterface GenerateIdOptions {\n  length?: number;\n  separator?: string;\n}\n\nexport function generateId(\n  prefixOrOptions?: keyof typeof prefixes | GenerateIdOptions,\n  inputOptions: GenerateIdOptions = {},\n) {\n  const finalOptions =\n    typeof prefixOrOptions === \"object\" ? prefixOrOptions : inputOptions;\n\n  const prefix =\n    typeof prefixOrOptions === \"object\" ? undefined : prefixOrOptions;\n\n  const { length = 12, separator = \"_\" } = finalOptions;\n  const id = customAlphabet(\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n    length,\n  )();\n\n  return prefix && prefix in prefixes\n    ? `${prefixes[prefix]}${separator}${id}`\n    : id;\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/parsers.ts",
      "content": "import { createParser } from \"nuqs/server\";\nimport { z } from \"zod\";\n\nimport { dataTableConfig } from \"@/config/data-table\";\n\nimport type {\n  ExtendedColumnFilter,\n  ExtendedColumnSort,\n} from \"@/types/data-table\";\n\nconst sortingItemSchema = z.object({\n  id: z.string(),\n  desc: z.boolean(),\n});\n\nexport const getSortingStateParser = <TData>(\n  columnIds?: string[] | Set<string>,\n) => {\n  const validKeys = columnIds\n    ? columnIds instanceof Set\n      ? columnIds\n      : new Set(columnIds)\n    : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(sortingItemSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnSort<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every(\n        (item, index) =>\n          item.id === b[index]?.id && item.desc === b[index]?.desc,\n      ),\n  });\n};\n\nconst filterItemSchema = z.object({\n  id: z.string(),\n  value: z.union([z.string(), z.array(z.string())]),\n  variant: z.enum(dataTableConfig.filterVariants),\n  operator: z.enum(dataTableConfig.operators),\n  filterId: z.string(),\n});\n\nexport type FilterItemSchema = z.infer<typeof filterItemSchema>;\n\nexport const getFiltersStateParser = <TData>(\n  columnIds?: string[] | Set<string>,\n) => {\n  const validKeys = columnIds\n    ? columnIds instanceof Set\n      ? columnIds\n      : new Set(columnIds)\n    : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(filterItemSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnFilter<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every(\n        (filter, index) =>\n          filter.id === b[index]?.id &&\n          filter.value === b[index]?.value &&\n          filter.variant === b[index]?.variant &&\n          filter.operator === b[index]?.operator,\n      ),\n  });\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "src/config/data-table.ts",
      "content": "export type DataTableConfig = typeof dataTableConfig;\n\nexport const dataTableConfig = {\n  textOperators: [\n    { label: \"Contains\", value: \"iLike\" as const },\n    { label: \"Does not contain\", value: \"notILike\" as const },\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  numericOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is less than\", value: \"lt\" as const },\n    { label: \"Is less than or equal to\", value: \"lte\" as const },\n    { label: \"Is greater than\", value: \"gt\" as const },\n    { label: \"Is greater than or equal to\", value: \"gte\" as const },\n    { label: \"Is between\", value: \"isBetween\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  dateOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is before\", value: \"lt\" as const },\n    { label: \"Is after\", value: \"gt\" as const },\n    { label: \"Is on or before\", value: \"lte\" as const },\n    { label: \"Is on or after\", value: \"gte\" as const },\n    { label: \"Is between\", value: \"isBetween\" as const },\n    { label: \"Is relative to today\", value: \"isRelativeToToday\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  selectOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  multiSelectOperators: [\n    { label: \"Has any of\", value: \"inArray\" as const },\n    { label: \"Has none of\", value: \"notInArray\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  booleanOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n  ],\n  sortOrders: [\n    { label: \"Asc\", value: \"asc\" as const },\n    { label: \"Desc\", value: \"desc\" as const },\n  ],\n  filterVariants: [\n    \"text\",\n    \"number\",\n    \"range\",\n    \"date\",\n    \"dateRange\",\n    \"boolean\",\n    \"select\",\n    \"multiSelect\",\n  ] as const,\n  operators: [\n    \"iLike\",\n    \"notILike\",\n    \"eq\",\n    \"ne\",\n    \"inArray\",\n    \"notInArray\",\n    \"isEmpty\",\n    \"isNotEmpty\",\n    \"lt\",\n    \"lte\",\n    \"gt\",\n    \"gte\",\n    \"isBetween\",\n    \"isRelativeToToday\",\n  ] as const,\n  joinOperators: [\"and\", \"or\"] as const,\n};\n",
      "type": "registry:file",
      "target": "src/config/data-table.ts"
    },
    {
      "path": "src/types/data-table.ts",
      "content": "import type { ColumnSort, Row, RowData } from \"@tanstack/react-table\";\r\nimport type { DataTableConfig } from \"@/config/data-table\";\r\nimport type { FilterItemSchema } from \"@/lib/parsers\";\r\n\r\ndeclare module \"@tanstack/react-table\" {\r\n  // biome-ignore lint/correctness/noUnusedVariables: TData is used in the TableMeta interface\r\n  interface TableMeta<TData extends RowData> {\r\n    queryKeys?: QueryKeys;\r\n  }\r\n\r\n  // biome-ignore lint/correctness/noUnusedVariables: TData and TValue are used in the ColumnMeta interface\r\n  interface ColumnMeta<TData extends RowData, TValue> {\r\n    label?: string;\r\n    placeholder?: string;\r\n    variant?: FilterVariant;\r\n    options?: Option[];\r\n    range?: [number, number];\r\n    unit?: string;\r\n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\r\n  }\r\n}\r\n\r\nexport interface QueryKeys {\r\n  page: string;\r\n  perPage: string;\r\n  sort: string;\r\n  filters: string;\r\n  joinOperator: string;\r\n}\r\n\r\nexport interface Option {\r\n  label: string;\r\n  value: string;\r\n  count?: number;\r\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>;\r\n}\r\n\r\nexport type FilterOperator = DataTableConfig[\"operators\"][number];\r\nexport type FilterVariant = DataTableConfig[\"filterVariants\"][number];\r\nexport type JoinOperator = DataTableConfig[\"joinOperators\"][number];\r\n\r\nexport interface ExtendedColumnSort<TData> extends Omit<ColumnSort, \"id\"> {\r\n  id: Extract<keyof TData, string>;\r\n}\r\n\r\nexport interface ExtendedColumnFilter<TData> extends FilterItemSchema {\r\n  id: Extract<keyof TData, string>;\r\n}\r\n\r\nexport interface DataTableRowAction<TData> {\r\n  row: Row<TData>;\r\n  variant: \"update\" | \"delete\";\r\n}\r\n",
      "type": "registry:file",
      "target": "src/types/data-table.ts"
    }
  ]
}